#+title: Procedure for Creating Multi fidelity Domain using discrete tables
#+AUTHOR: Panayotis Manganaris
#+EMAIL: pmangana@purdue.edu
#+PROPERTY: header-args :session mrg :kernel mrg :async yes :pandoc org :results raw drawer
* Load Data
#+begin_src jupyter-python
  mannodi_pbe_q = """SELECT *
                     FROM mannodi_pbe"""
  mannodi_hse_q = """SELECT *
                     FROM mannodi_hse"""
  mannodi_hsc_q = """SELECT *
                     FROM mannodi_hsesoc"""
  almora_q = """SELECT *
                FROM almora"""
  ref_q = """SELECT *
             FROM mannodi_ref_elprop"""
  with sqlite3.connect(os.path.expanduser("~/src/cmcl/cmcl/db/perovskites.db")) as conn:
      mannodi_pbe = pd.read_sql(mannodi_pbe_q, conn, index_col="index")
      mannodi_hse = pd.read_sql(mannodi_hse_q, conn, index_col="index")
      mannodi_hsc = pd.read_sql(mannodi_hsc_q, conn, index_col="index")
      almora = pd.read_sql(almora_q, conn, index_col='index')
      lookup = pd.read_sql(ref_q, conn, index_col='index')
#+end_src

** lookup indexing
#+begin_src jupyter-python
  lookup = lookup.set_index("Formula")
#+end_src

* clean data
** manipulations per column
#+begin_src jupyter-python
  almora_num = almora.columns[[1,2,3,4,5]].to_list()
  hsc_num = mannodi_hsc.columns[[2,3]].to_list()
  hse_num = mannodi_hse.columns[[2,4,5,6,7]].to_list()
  pbe_num = mannodi_pbe.columns[[2,4,5,6,7,8,9,10,11]].to_list()

  almora_obj = [col for col in almora.columns if col not in almora_num]
  hsc_obj = [col for col in mannodi_hsc.columns if col not in hsc_num]
  hse_obj = [col for col in mannodi_hse.columns if col not in hse_num]
  pbe_obj = [col for col in mannodi_pbe.columns if col not in pbe_num]
#+end_src

** control dtypes
#+begin_src jupyter-python
  #used to drop nans in desired target
  mannodi_pbe[pbe_num] = mannodi_pbe[pbe_num].applymap(pd.to_numeric, errors='coerce')
  mannodi_hse[hse_num] = mannodi_hse[hse_num].applymap(pd.to_numeric, errors='coerce')
  almora[almora_num] = almora[almora_num].applymap(pd.to_numeric, errors='coerce')
  mannodi_hsc[hsc_num] = mannodi_hsc[hsc_num].applymap(pd.to_numeric, errors='coerce')    
#+end_src

* for fidelity comparisons
** define collection operation dictionaries
#+begin_src jupyter-python
  def make_ops(obj, num):
      ops = {**dict(zip(obj, ['first']*len(obj))), **dict(zip(num, ['median']*len(num)))}
      return ops

  almora_ops = make_ops(almora_obj, almora_num)
  hsc_ops = make_ops(hsc_obj, hsc_num)
  hse_ops = make_ops(hse_obj, hse_num)
  pbe_ops = make_ops(pbe_obj, pbe_num)
#+end_src

** trim and aggregate possible targets
repeated record measures are aggregated
#+begin_src jupyter-python
  almora = almora.groupby('Formula').agg(almora_ops).reset_index(drop=True)
  mannodi_pbe = mannodi_pbe.groupby('Formula').agg(pbe_ops).reset_index(drop=True)
  mannodi_hse = mannodi_hse.groupby('Formula').agg(hse_ops).reset_index(drop=True)
  mannodi_hsc = mannodi_hsc.groupby('Formula').agg(hsc_ops).reset_index(drop=True)
#+end_src

#+begin_src jupyter-python
  almora.dropna(subset=almora_num, how='all', inplace=True)
  mannodi_pbe.dropna(subset=pbe_num, how='all', inplace=True)
  mannodi_hse.dropna(subset=hse_num, how='all', inplace=True)
  mannodi_hsc.dropna(subset=hsc_num, how='all', inplace=True)
#+end_src

* Clean Data and label
going forward we just assume that almora consists primarily of cubic phase crystals
** subset based on deviation from cubicity
#+begin_src jupyter-python
  exclude = ["Rb0.375Cs0.625GeBr3", "RbGeBr1.125Cl1.875", "K0.75Cs0.25GeI3", "K8Sn8I9Cl15"]
  mannodi_pbe = mannodi_pbe[~mannodi_pbe.Formula.isin(exclude)]
  mannodi_hse = mannodi_hse[~mannodi_hse.Formula.isin(exclude)]
  mannodi_hsc = mannodi_hsc[~mannodi_hsc.Formula.isin(exclude)]  
  almora = almora[~almora.Formula.isin(exclude)]
#+end_src

** create LoT axis
#+begin_src jupyter-python
  mannodi_pbe = mannodi_pbe.assign(LoT='PBE')
  mannodi_hse = mannodi_hse.assign(LoT='HSE')
  mannodi_hsc = mannodi_hsc.assign(LoT='HSC')  
  almora = almora.assign(LoT='EXP')
#+end_src

* Compute Base
** Compute Composition Vectors
#+begin_src jupyter-python
  pc = mannodi_pbe.ft.comp().iloc[:, :14:]
  hc = mannodi_hse.ft.comp().iloc[:, :14:]
  hsc = mannodi_hsc.ft.comp().iloc[:, :14:]
  ec = almora.ft.comp()
#+end_src

** validate compositions
#+begin_src jupyter-python
  def validate_composition(df, cdf):
        if hasattr(df, 'sim_cell'):
              size = df.sim_cell.isin(["2x2x2"])
        else:
              size = [True]*df.shape[0]
        cdf = cdf.collect.abx()
        g = cdf.groupby(level=0, axis=1).sum()
        vB, vX, vA, = g.A.isin([1, 8]), g.B.isin([1, 8]), g.X.isin([3, 24])
        #subset indexes
        focus = size*vB*vA*vX
        return df[focus], cdf[focus]
#+end_src

#+begin_src jupyter-python
  mannodi_pbe, pc = validate_composition(mannodi_pbe, pc)
  mannodi_hse, hc = validate_composition(mannodi_hse, hc)
  mannodi_hsc, hsc = validate_composition(mannodi_hsc, hsc)
  ec = ec.applymap(pd.to_numeric, errors='coerce')
  almora, ec = validate_composition(almora, ec)
#+end_src

** Compute Site Properties
#+begin_src jupyter-python
  pp = join3(mannodi_pbe.Formula.to_frame(), pc, lookup, thru='element', right_on='Formula').reset_index(drop=True)
  hp = join3(mannodi_hse.Formula.to_frame(), hc, lookup, thru='element', right_on='Formula').reset_index(drop=True)
  ep = join3(almora.Formula.to_frame(), ec, lookup, thru='element', right_on='Formula').reset_index(drop=True)
  hsp = join3(mannodi_hsc.Formula.to_frame(), hsc, lookup, thru='element', right_on='Formula').reset_index(drop=True)
#+end_src

* Unify Domain
Base Domain may be mutated based on feature's Predictive Power by individual pipelines
** Basic Domains
#+begin_src jupyter-python
  my = pd.concat([mannodi_pbe, mannodi_hse, almora, mannodi_hsc], axis=0).reset_index(drop=True)

  mc = pd.concat([pc, hc, ec, hsc], axis=0).reset_index(drop=True)
  mp = pd.concat([pp, hp, ep, hsp], axis=0).reset_index(drop=True)
  mm = pd.concat([mc, mp, my.LoT], axis=1)
  mm.columns = list(map(str, mm.columns))
#+end_src
** unified categorical features
#+begin_src jupyter-python
  def make_category_labels(target):
      mixlog = target.ft.comp().collect.abx().groupby(level=0, axis=1).count()
      mix = mixlog.pipe(Categories.logif, condition=lambda x: x>1, default="pure", catstring="and")

      organics = target.ft.comp().collect.org()
      orglog = organics.groupby(level=0, axis=1).count()
      org = orglog.pipe(Categories.logif, condition=lambda x: x>=1, default="error", catstring="_&_")
      return mix, org

  mix, org = make_category_labels(my)
  my = my.assign(mix=mix).assign(org=org)
#+end_src

** filter out BandX
#+begin_src jupyter-python
  mixfilter = my.mix.isin(['A', 'B', 'X', 'pure'])
  mm = mm[mixfilter]
  my = my[mixfilter]
#+end_src

* Separate Domains
easy to do, but can be set up here if needed
** trim domains to apply multifi models to single-fi datasets
#+begin_src jupyter-python
  #py = my[my.LoT=='pbe']
  #pf = mm[my.LoT=='pbe']
#+end_src
